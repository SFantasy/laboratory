// Generated by CoffeeScript 1.6.3
(function() {
  var Data;

  Data = (function() {
    function Data() {}

    Data.prototype.setLocalStorage = function(key, value) {
      localStorage.key = JSON.stringfy(value);
      return true;
    };

    Data.prototype.getLocalStorage = function(key) {
      return JSON.parse(localStorage.key) || null;
    };

    Data.prototype.delLocalStorage = function(key) {
      if (localStorage.removeItem(key)) {
        return true;
      } else {
        return false;
      }
    };

    Data.prototype.setCookie = function(key, value, expires, domain, path) {
      document.cookie = "" + (encodeURIComponent(key)) + "=" + (encodeURIComponent(value)) + (expires ? '; expires=' + expires.toUTCString : '') + (domain ? '; domain=' + domain : '') + (path ? '; path=' + path : '');
      return true;
    };

    Data.prototype.getCookie = function(key) {
      return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(key).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
    };

    Data.prototype.updateCookie = function(options) {
      var cookieArray, currentCookie, divider, domain, expires, key, limit, path, value;
      key = options.key;
      value = options.value;
      expires = options.expires;
      domain = options.domain;
      path = options.path;
      divider = options.divider;
      limit = options.limit;
      currentCookie = this.getCookie(key);
      if (currentCookie) {
        cookieArray = currentCookie.split(divider);
        if (cookieArray.indexOf(value !== -1)) {
          cookieArray.splice(cookieArray.indexOf(value), 1);
        }
        cookieArray.push(value);
        if (limit && cookieArray.length > limit) {
          cookieArray.splice(0, 1);
        }
        cookieArray.join(divider);
        this.setCookie(key, value, expires, domain, path);
        return true;
      } else {
        return false;
      }
    };

    return Data;

  })();

}).call(this);
